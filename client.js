// Generated by CoffeeScript 1.6.3
(function() {
  var Game, HangRabbit,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  HangRabbit = (function() {
    function HangRabbit() {
      this.handleTextInputEnter = __bind(this.handleTextInputEnter, this);
      this.handleLetterChoice = __bind(this.handleLetterChoice, this);
      this.ENTER_KEYCODE = 13;
      this.game = null;
      $(".js-phrase-input").keyup(this.handleTextInputEnter);
      $(".js-letter-choices").click(this.handleLetterChoice);
      this.loadNewGame("Gimme a break");
      this.refreshLetterChoices();
    }

    HangRabbit.prototype.loadNewGame = function(phrase) {
      var $clueArea, letter, _i, _len, _results;
      phrase = phrase.toLowerCase();
      this.game = new Game(phrase);
      $(".js-attempts-left").html(this.game.getAttemptsLeft());
      $clueArea = $(".js-letter-underlines");
      $clueArea.empty();
      _results = [];
      for (_i = 0, _len = phrase.length; _i < _len; _i++) {
        letter = phrase[_i];
        if (letter === " ") {
          _results.push($clueArea.append("<span class=\"char space\" />"));
        } else {
          _results.push($clueArea.append("<span class=\"char underscore\" />"));
        }
      }
      return _results;
    };

    HangRabbit.prototype.handleLetterChoice = function($ev) {
      var guess, isValidGuess, location, locations, _i, _len;
      isValidGuess = true;
      if (this.game.isLost()) {
        isValidGuess = false;
      }
      if (this.game.isWon()) {
        isValidGuess = false;
      }
      if (!$($ev.target).hasClass("letter-choice")) {
        isValidGuess = false;
      }
      if ($($ev.target).hasClass("disabled")) {
        isValidGuess = false;
      }
      if (isValidGuess) {
        $($ev.target).addClass("disabled");
        guess = $ev.target.innerHTML;
        locations = this.game.guessLetter(guess);
        for (_i = 0, _len = locations.length; _i < _len; _i++) {
          location = locations[_i];
          $(".char").eq(location).removeClass("underscore").addClass("guessed").html(guess);
        }
        $(".js-attempts-left").html(this.game.getAttemptsLeft());
        if (this.game.isLost()) {
          console.log("loser");
        }
        if (this.game.isWon()) {
          return console.log("winner");
        }
      }
    };

    HangRabbit.prototype.refreshLetterChoices = function() {
      var $container, c, x, _i, _results;
      $container = $('.js-letter-choices');
      $container.empty();
      _results = [];
      for (x = _i = 65; _i <= 90; x = ++_i) {
        c = String.fromCharCode(x);
        _results.push($container.append("<span class=\"letter-choice\">" + c + "</span>"));
      }
      return _results;
    };

    HangRabbit.prototype.handleTextInputEnter = function($ev) {
      var inputText;
      if ($ev.keyCode === this.ENTER_KEYCODE) {
        inputText = $(".js-phrase-input").val();
        return this.validateInput(inputText);
      }
    };

    HangRabbit.prototype.validateInput = function(phrase) {
      var li, phrases;
      phrases = ((function() {
        var _i, _len, _ref, _results;
        _ref = $("li.js-phrase");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          li = _ref[_i];
          _results.push(li.innerHTML);
        }
        return _results;
      })()) || [];
      if (__indexOf.call(phrases, phrase) >= 0) {
        return this.showValidationMessage("You already added that!");
      } else {
        this.addPhrase(phrase);
        return this.clearPhraseInput();
      }
    };

    HangRabbit.prototype.showValidationMessage = function(message) {
      return $(".js-validation-message").html(message);
    };

    HangRabbit.prototype.addPhrase = function(phrase) {
      var html;
      console.log("Adding phrase: '" + phrase + "'");
      html = "<li class=\"js-phrase\">" + phrase + "</li>";
      return $(".js-phrase-list").append(html);
    };

    HangRabbit.prototype.clearPhraseInput = function() {
      return $('.js-phrase-input').val("");
    };

    return HangRabbit;

  })();

  Game = (function() {
    function Game(phrase, maxAttempts) {
      var letter, _i, _len, _ref;
      this.phrase = phrase;
      this.maxAttempts = maxAttempts != null ? maxAttempts : 5;
      this.phrase = this.phrase.toLowerCase();
      this.rightGuesses = [];
      this.wrongGuesses = [];
      this.uniqueLetters = [];
      _ref = this.phrase;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        letter = _ref[_i];
        if ((letter !== " ") && (__indexOf.call(this.uniqueLetters, letter) < 0)) {
          this.uniqueLetters.push(letter);
        }
      }
    }

    Game.prototype.getPhrase = function() {
      return this.phrase;
    };

    Game.prototype.isWon = function() {
      return this.rightGuesses.length === this.uniqueLetters.length;
    };

    Game.prototype.isLost = function() {
      return this.wrongGuesses.length >= this.maxAttempts;
    };

    Game.prototype.getAttemptsLeft = function() {
      return this.maxAttempts - this.wrongGuesses.length;
    };

    Game.prototype.guessLetter = function(guess) {
      var i, letter, locations, _i, _len, _ref;
      guess = guess.toLowerCase();
      locations = [];
      _ref = this.phrase;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        letter = _ref[i];
        if (letter === guess) {
          locations.push(i);
        }
      }
      if (locations.length > 0) {
        this.rightGuesses.push(guess);
        console.log("right");
      } else {
        this.wrongGuesses.push(guess);
        console.log("wrong");
      }
      return locations;
    };

    return Game;

  })();

  $(document).ready(function() {
    var hangRabbit;
    return hangRabbit = new HangRabbit;
  });

}).call(this);
